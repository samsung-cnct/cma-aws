// Code generated by go-bindata.
// sources:
// assets/generated/swagger/api.swagger.json
// DO NOT EDIT!

package swaggerjson

import (
	"github.com/elazarl/go-bindata-assetfs"
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _apiSwaggerJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5b\x6d\x6f\xdb\x38\xf2\x7f\x9f\x4f\x31\xd0\xff\x0f\x5c\x17\x48\xe2\xb6\x87\x03\x0e\x79\x75\xde\x24\xdb\x1a\x6d\x1e\x10\xb7\x0d\x16\xd7\xc2\xa0\xa9\xb1\xc4\x8d\x44\xaa\x7c\xb0\xeb\x1e\xf2\xdd\x0f\xa4\x28\x5b\x92\x25\x5b\xb6\x9b\xae\xf7\x90\x05\x16\x95\x25\x72\x9e\xf9\xe3\xcc\x90\xf9\xcf\x11\x40\xa0\x66\x24\x8a\x50\x06\x67\x10\xbc\x3e\x7d\x19\x1c\xdb\x77\x8c\x4f\x44\x70\x06\xf6\x3b\x40\xa0\x99\x4e\xd0\x7e\x3f\x4f\x8c\xd2\x28\xe1\x8a\x70\x12\xa1\x84\xfe\xfd\x10\xde\x62\x92\xd9\xc7\xdb\x81\x9b\x0a\x10\x4c\x51\x2a\x26\xb8\x9d\x30\x7d\x79\xfa\xca\xd3\x04\x08\xa8\xe0\x9a\x50\xbd\x20\x0c\x10\x70\x92\x3a\xca\x57\x8c\xc6\x04\x13\xf8\x84\x1c\xbf\x33\xe2\x67\x00\x04\x46\x26\xf6\x7b\xac\x75\xa6\xce\x7a\xbd\x88\xe9\xd8\x8c\x4f\xa9\x48\x7b\x8a\xa4\xca\xf0\xe8\x84\x72\xaa\x7b\x34\x25\x27\x64\xa6\x96\xf3\x30\x25\xcc\xcd\x4c\xa7\x39\xc9\x7f\x45\xf6\x8d\x9d\x19\xb8\x31\x8f\x47\x00\x8f\x4e\x59\x45\x63\x4c\x51\x05\x67\xf0\xef\x5c\x4e\xc7\xac\x10\xda\xfe\xb0\x33\xbe\xb8\xb1\x54\x70\x65\x2a\x83\x49\x96\x25\x8c\x12\xcd\x04\xef\xfd\xa1\x04\x5f\x8e\xcd\xa4\x08\x0d\xed\x38\x96\xe8\x58\x2d\x2d\xde\x23\x19\xeb\x4d\x5f\xf5\x68\x6e\xf0\xb2\xc5\x22\x2c\x1b\xd0\x8a\x6f\xd2\x94\xc8\xb9\xd5\xf5\x9e\x25\x09\x48\xd4\x92\xe1\x14\x41\xc7\x08\x4a\x13\x6d\x14\x88\x09\x10\xf0\xc4\x80\xf0\x10\x98\x56\xf0\x60\xc6\x48\x05\x9f\xb0\x08\x26\x42\x02\x15\x9c\x23\xd5\x6c\xca\xf4\x7c\x61\x47\x80\x40\x64\x28\x9d\xc8\x83\xd0\xf2\x78\x83\xda\x87\x41\x79\x90\x44\x95\x09\xae\x50\x55\x64\x03\x08\x5e\xbf\x7c\x59\x7b\x05\x10\x84\xa8\xa8\x64\x99\xf6\x51\x52\x22\x94\x6b\x64\x1d\x42\x56\xa6\x01\x04\xff\x2f\x71\x62\x67\xfc\x5f\x2f\xc4\x09\xe3\xcc\x52\x50\xd6\xf9\x64\xa6\x96\x82\xdd\x61\x96\xcc\x83\xca\xdc\xc7\xa3\xa6\xe7\xc7\x92\x06\x19\x91\x24\x45\x8d\x72\xe9\xaf\xfc\xbf\x9a\xec\x45\xc4\xba\x7f\x8f\xd7\xea\x75\x4d\x52\xb4\xa6\xb7\x8e\x28\x8c\xaf\x05\x8c\x11\x12\x21\x1e\x30\x04\x93\x9d\xd6\x49\x30\x37\xf3\xab\x41\x39\xaf\x7f\x92\xf8\xd5\x30\x89\xd6\x0b\x13\x92\x28\xac\x7d\xd6\xf3\xcc\x09\xa6\xb4\x64\x3c\x2a\xab\xff\x78\xbc\x59\x1d\x2a\x31\x44\xae\x19\x49\xd4\xa9\x42\x2a\x51\x8f\x1e\x70\x3e\x62\xe1\x06\x1d\x3f\xc4\x08\x43\x37\xfe\x1d\xce\x07\xa1\x8b\xa4\xfe\xed\x00\xfa\x94\xa2\x52\x87\xac\x1e\x71\x12\x5a\x2d\x3b\xab\x98\x2b\xf5\x0e\xe7\x0b\x35\xc9\xe1\xaa\x29\x31\xb2\x0a\x6c\xd6\xed\xce\x0d\x3c\x54\x95\x3a\xa9\x71\x41\x34\xa1\xc8\xed\x02\xcb\xc7\xff\x1c\xf1\x17\xcf\x5f\x4a\x40\xa2\x49\x54\x87\x90\x62\xe3\x5c\x4e\xfe\x72\x54\xb3\x40\x10\x62\x82\x1a\xd7\x43\x7b\x3e\x66\x09\xe5\x6b\x60\xfa\xc2\x0d\x3d\x4c\xa4\xae\xc8\x76\x28\x60\x7d\x1f\x13\x0d\x4c\x95\xc1\xfa\x6f\x0a\xec\x44\x8b\xd9\x21\x2a\x2d\xc5\xfc\x60\x56\xc5\x33\x5c\x77\x50\xf1\x19\xae\x9f\xe1\xfa\xa9\xe0\x3a\x33\x1b\xd2\xf0\x4c\x8a\x29\xb3\x75\x50\x27\xb8\x3e\x97\x48\x0e\x15\xae\x2b\xb2\xfd\x14\xb8\x1e\x8b\x70\xc5\xed\x79\x44\x34\x7d\x29\x05\x84\x96\xa6\x1e\x0f\x3f\x40\xe7\x2b\x15\x75\xd1\x78\xf7\xa8\x3a\x2a\x19\xac\x5e\xfb\xf5\x12\xa6\xf4\x6e\x05\x20\x01\x3b\xd7\x56\x20\x9e\x96\xea\x54\xd7\xbd\xb7\x0c\x0f\x2b\x04\xab\xc2\xfd\x94\x18\x7c\xde\x61\x3b\xa8\xf8\xbc\xc3\xfe\x55\x76\x58\x78\x41\x1c\x34\xd8\x67\x05\x34\x46\xfa\x80\x21\xb0\x09\x70\xa1\x41\xa1\xfe\xe5\x2f\xb3\x05\x37\x82\xe5\xb2\xe7\xb8\x15\x4e\x1a\xc9\xc1\x4f\x05\xc6\x27\x42\xa6\x0e\x11\x81\x8c\x85\xd1\x40\x32\x06\x0a\xe5\x74\xed\xce\xfd\x06\xf5\xa7\x9c\xc2\x60\x49\xe0\xf0\xe0\xd3\xcb\xb8\x13\x74\xee\xe2\x9f\x45\x77\xb5\x24\xcd\xb2\xbf\x59\xd9\x5e\xfb\xf7\xc3\x61\x86\xb4\x7f\x3f\xb4\x51\x7b\xee\xa2\xb6\xec\xc8\x22\x9c\xc4\xf8\x0f\xa4\xcb\x9d\x29\xc8\xa4\x75\x85\x66\x35\xcb\x16\x0b\xa4\x66\xed\x5a\x50\x1e\x57\xbe\x15\x0d\xee\xfb\x98\xd1\x78\xb1\x62\x8c\x3a\x41\xa2\xf4\xc9\xab\x63\x40\x4d\x4f\x7f\x09\x1a\xad\x43\xa6\x84\x25\x64\xcc\x12\xa6\xe7\xa3\xef\x82\xaf\x3a\xba\x60\x4d\xa4\x24\xd5\xb5\x14\x30\x8d\x69\x7d\x7c\x77\x84\xa8\x0b\x5e\x16\x05\x9c\x28\x25\x25\xc6\xc7\x50\x3c\xbf\xa6\xee\x79\x86\xf6\x39\x5c\xd5\x6e\x25\xdb\xad\xf1\xb1\x7e\x02\xef\xa8\xca\x72\x6c\xf1\xeb\x80\x2b\x4d\x38\xc5\x37\x52\x98\x6c\x1f\xd7\xfa\xf1\xdb\x3b\xb6\x90\x00\xec\x68\x78\x91\xfe\xe3\x34\x21\x32\xc2\xb5\x8e\x4d\x19\x1f\x7d\x35\x84\x6b\xa6\xe7\x6d\x4c\x19\xd7\x18\x55\xf0\x01\x20\xc8\x61\xc0\x7f\xfe\xfb\xeb\x16\x91\xae\x18\x67\xa9\x49\x81\x9b\x74\x8c\xd2\x66\x69\xcc\x0b\xa9\xe0\x45\x88\x13\x62\x12\xad\x40\x0b\xf8\x8e\x52\xb4\x89\x48\xbe\x3d\xa9\x88\xe4\xdb\xde\x22\xfa\x6d\x6b\x7b\x97\x15\xdd\xf3\x82\x25\x44\x36\x7a\xe0\x85\x70\xe0\x48\x12\x20\x46\x8b\x93\x08\xb9\x85\xe3\xea\x5e\xd6\x2c\x49\x88\xca\x6e\x5a\x4f\x69\xb0\xeb\x85\xa1\x66\x42\x3e\xa0\x04\x2e\x42\x2c\x19\xcd\x8b\xd0\xd9\x78\x4a\xc5\x3e\x2d\x6b\x13\x76\x2c\x44\x82\x84\xb7\x09\xdb\xf8\x79\x21\xee\x70\xf8\xd6\xe7\xa5\x56\x0e\x91\x21\x07\xa5\x62\x9f\xf0\x80\xe0\xae\x19\x66\x55\x50\x9d\xc0\x61\x50\xf1\x94\xd5\x76\xc2\xb8\x2d\x43\xdc\xa2\x23\x3c\x6c\x0a\xa4\x4e\x00\x72\x2b\xfd\x49\x95\x91\x18\x0e\x6a\x98\xb9\x35\x8a\x4c\x33\x6a\xf3\xf8\x5d\x82\xd2\xa6\x87\x9f\x6e\xcf\x81\x85\xc7\x30\x4e\x08\x7f\x70\x59\xa2\xfd\xff\xb3\xcd\x35\x89\x46\x10\x1c\xdd\x8b\xb9\x30\x9f\x83\x63\x98\xb0\x24\xc9\xa3\x73\x2e\x0c\x10\x89\xf0\xeb\xef\x37\x96\x46\x8b\xc7\x91\x1a\x69\x77\x12\x67\xc3\x5d\xc5\x1c\x7a\x2a\xb9\x27\x9a\x39\x31\x92\x8e\xa4\x48\x70\x44\xe4\x6e\x9b\xa5\xb5\xc5\xa0\x7f\x05\x96\x88\xd3\xb8\x7c\xce\xf5\x82\x48\xde\x6d\x4b\xf9\x4d\x48\x98\xc5\x36\xf4\x44\x8a\xa0\x63\xc6\x23\xe5\xec\x44\x12\x89\x24\x9c\x43\x6e\xd7\xb0\x1a\x28\xb5\x94\xa6\x21\x05\xdb\x23\x40\x22\xa6\x47\xab\x19\xe5\x76\x96\xd1\x24\x2a\x56\x50\xc4\x34\x48\xcc\x84\x62\x5a\xc8\x79\xb3\x37\x2c\x4b\x2a\xd2\x94\xe9\x9d\x39\xc6\x44\xc5\xc5\x71\xa3\x65\xe9\xc9\xb5\xb2\xd3\x12\x71\xa4\x34\xd1\xbb\xe1\xf3\x7d\x8c\x3a\xb6\x8b\x59\x3a\xdc\xb5\x5c\x2d\x45\x98\x11\x05\xd4\x82\x4e\xee\xd5\xb1\x61\x49\x8b\x10\xf6\x53\x38\x0a\x77\x15\xe0\xc2\xad\xb6\x89\xe3\x10\xb6\xa8\x29\xf6\xf2\xa3\x8f\x2a\xcb\x24\x12\x60\x14\x86\x16\x27\xa9\x48\x33\x96\x60\x33\x47\xff\x51\xee\xc4\xef\xdc\x4f\x76\xac\x9a\xe9\x67\x09\xd1\x36\xc6\x77\xa2\x7f\xeb\x27\x03\xd3\xb9\x9b\x72\x7e\x79\x93\xa2\x07\xd2\x70\xce\xb8\x0d\xdb\x86\x85\x5b\x59\x7d\x79\x59\xd1\xbf\x1f\x9e\x2f\xeb\xeb\x7d\x16\x5c\xb5\xc1\xb2\xeb\x02\x68\x6f\xbb\xb4\x62\x6d\xad\xef\xb1\x1f\xe7\xb6\x6e\x48\x33\xf7\x3d\xca\x94\xd6\x26\x45\x27\xc0\xb5\xb3\x4b\x7d\x11\x1b\xd2\x46\xe5\x08\xee\xa0\xd6\x86\x40\x09\xca\x83\x06\xcf\xfb\x0d\xfa\x02\x35\x61\x89\xdd\x8f\xf7\x71\xfe\x8e\x1e\x1f\x5c\xd4\xee\x56\x3c\x51\xfe\xb9\x91\x43\x7e\xc7\x66\x94\xa2\x52\x24\xda\x8d\x57\x3f\x0c\x99\xcf\x6a\x57\xdb\x10\xd5\x7b\x3c\x1b\xc5\x59\x5e\xeb\xd9\x11\xd6\x97\xe7\xa0\xa5\x1b\x42\x0e\xf7\xdc\x05\x21\xfb\xd8\xd1\x26\x75\x01\xd6\x76\xdc\x73\x72\xc3\x7c\x62\x7b\xdc\x6f\xb2\xc4\x1a\xbc\xf2\x2c\x9e\xe3\xf5\xa0\xe2\xf5\xcf\x0b\x95\x1f\x03\xc6\x2b\xad\xd6\xad\x82\x71\x58\xd7\xbe\x8d\x69\x80\xdc\xa4\x95\x2e\x5c\x30\xfc\xd0\xff\xf0\x71\x38\xfa\x78\x3d\xbc\xbd\x3c\x1f\xfc\x36\xb8\xbc\x28\xf7\x1d\x6f\xef\x6e\x3e\x0d\x86\x83\x9b\xeb\xc1\xf5\x9b\xf2\xfb\xbb\x8f\xd7\x2b\xaf\x2e\xcf\x6f\xae\xcf\x07\xef\x6b\xaf\x87\x1f\x6e\x6e\x6f\x6b\xef\x2e\xef\xee\x6e\xee\xca\x2f\x2e\x2e\xdf\xdc\xf5\x2f\x2e\x2f\x0a\xad\x17\x8d\xdd\xc0\xd7\xb8\xae\x1e\x69\x97\x74\x69\xc8\x13\x58\x1d\x76\x06\xd7\x79\x4d\xff\x99\xc3\x09\x94\x55\x3a\x03\xeb\xe2\xf2\x1b\xe7\x6f\x5b\x6d\x87\x8c\x12\x8d\x95\xab\x1c\x16\xd1\xc6\x68\x77\x36\x5f\x4d\x9c\x3a\x82\xde\x16\x39\x2d\xff\x63\x2d\x99\x98\x58\x3a\xc8\x0b\x32\xf9\x65\x4a\x05\x13\x93\x24\x73\x30\x8a\x8c\x13\xf4\xa4\x97\x36\xf5\xe4\x97\x2f\x1a\x58\x10\x9d\xd7\x3f\x33\x21\x1f\x2c\x41\x42\x35\x9b\x62\x32\xf7\x52\x87\xb6\xaa\xf4\xe5\x84\x97\xe5\x18\x94\xa1\x31\x10\x05\x26\x8b\x24\x09\x8b\x6d\x3b\x25\x4e\x52\xe1\x9b\x0f\x4a\x4c\xf4\x8c\x48\x2f\x55\xe1\xd2\x5c\xa4\xe2\x57\x37\xcb\xe5\xb7\x8f\x42\x47\xc7\x85\x41\x4e\xc4\x3d\xae\xa5\x90\x12\xab\x06\x18\x9e\xdb\xc7\x11\x28\xc2\x26\xa7\x51\xfc\x5a\x4b\xc6\x9f\x3a\x28\x9b\xad\x48\x67\x20\x6b\x10\x01\x12\x95\x16\x12\x9d\x0f\x60\x62\x38\xcd\x91\x89\xe9\x79\x63\xea\xd2\xd0\x61\xd8\x67\x37\x08\x89\x26\x23\x5a\x6f\x5a\xaf\xc1\xb0\xcd\xbd\xef\x76\x44\xeb\xdf\x0f\x57\x9b\xaf\x75\x2c\xa3\x8d\x39\xf9\x1a\x89\x1a\xb3\xf9\x96\x0a\xa5\x9a\x37\xba\xd2\xab\x0b\xba\x2a\x61\x24\x5d\xed\x8c\x6f\x65\xa1\x86\x26\x50\xb3\x90\xbf\xfe\x7e\x03\x79\x63\xbd\x51\x9a\xa2\xf5\x94\xb7\x58\x7e\x40\xb7\x7e\x2b\x2d\xaa\xbd\xf0\x12\xa1\x96\xce\x7e\xad\xa9\xd6\x71\x73\xa9\x5f\x5f\xd8\x23\xc0\x7f\x64\x42\xe2\xaf\x3f\x2f\xee\xc6\xb4\x56\xb9\x76\x40\xd8\x75\x45\x35\xe8\x7c\xeb\x09\xb8\xd5\xdd\xbe\x9e\x0a\x3e\xa0\x32\xa4\x6c\xe2\xef\xe6\xef\x60\xe3\x0a\xbf\x3f\xc3\xd8\xe5\xb4\x7d\xa1\xd5\x09\x50\x23\x25\x72\x9d\xcc\x41\xc7\x4c\xb9\x8d\x65\xa6\xec\xde\x90\x12\xd2\xb2\x3c\x1e\xfe\xa9\xf6\x6e\x7e\x4d\x97\x8d\x93\x77\x66\x8c\x92\xa3\xc6\x16\x76\x64\xb6\x5d\xee\xd7\x04\xdf\xeb\x01\xb3\xcd\xb7\x25\x21\x62\x16\xc5\xa3\xf2\xe9\xd9\x93\xb4\xdb\x1b\x3a\x66\xa5\x4d\xf6\x6d\xbf\xa5\x20\x40\x6d\x93\x82\xd1\x84\x8c\x25\xa3\x3b\xbb\x24\x9f\xee\x17\x60\xad\xbf\xd4\x35\xca\xf3\xd3\xe3\x3d\xc2\x5b\x3c\xfc\x6c\xc3\xce\x88\x2a\xc3\x0d\x8c\xfd\x4a\xb0\xc9\x04\xaa\x96\xc6\xe4\xea\x9f\xdd\x6c\x8e\xcb\x52\x6d\xd9\xee\x84\xd0\x35\x4c\xea\x25\x49\x21\x0c\x14\x57\x05\xba\xb9\xa6\xe1\x1a\xf5\xe1\xb9\xe6\x5c\x98\x6a\x86\x60\xc3\xcf\xdf\xa6\x6e\x43\xff\xe6\x8a\xb0\xdb\xc1\x47\xa5\xe4\x5b\x75\xf2\x1a\x73\x36\xdd\x31\x3b\x3c\x7b\x0e\x6a\xc9\x79\x5e\x12\xa8\xb9\xb2\x81\xb7\x2e\x98\x9f\x2c\xcf\x59\x8d\xff\xcd\x49\xcd\xfb\xfa\xbd\xc4\x2d\x3d\xf4\x3f\xe7\x9d\x1d\xa0\xa6\xd4\x7c\xed\x6a\xbd\xca\x25\xa0\x03\xb4\xde\x04\x16\x97\xab\x1c\x70\xdf\xbc\x6b\x36\x9a\x4f\x2f\x46\xac\xf1\xb8\x6f\x8d\x01\x37\x9f\x1a\xae\x3f\x08\x2a\x8f\x5c\x35\xfa\x6a\x4b\xc3\x71\x71\x9d\xf5\x22\x23\xaa\x40\xd2\xf2\x96\x14\x7e\xd3\x28\x39\x49\x2e\x04\x2d\x5d\x93\xaa\x5d\x06\xbb\xb2\x55\x6e\xde\x63\xeb\xf6\x97\xb8\x5b\xfe\xf1\xac\x95\xe6\xe8\xf1\xe8\xbf\x01\x00\x00\xff\xff\x92\x77\xfd\xd7\x16\x3c\x00\x00")

func apiSwaggerJsonBytes() ([]byte, error) {
	return bindataRead(
		_apiSwaggerJson,
		"api.swagger.json",
	)
}

func apiSwaggerJson() (*asset, error) {
	bytes, err := apiSwaggerJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "api.swagger.json", size: 15382, mode: os.FileMode(420), modTime: time.Unix(1555020789, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"api.swagger.json": apiSwaggerJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"api.swagger.json": &bintree{apiSwaggerJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


func assetFS() *assetfs.AssetFS {
	assetInfo := func(path string) (os.FileInfo, error) {
		return os.Stat(path)
	}
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: assetInfo, Prefix: k}
	}
	panic("unreachable")
}
