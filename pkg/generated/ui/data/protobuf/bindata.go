// Code generated by go-bindata.
// sources:
// api/api.proto
// DO NOT EDIT!

package protobuf

import (
	"github.com/elazarl/go-bindata-assetfs"
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _apiProto = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x59\x5f\x6f\xdb\x38\x12\x7f\xf7\xa7\x18\xf8\xe5\xd2\x43\x62\x37\xe9\xf6\x6e\x91\x6c\x0e\xe7\x75\xb2\xad\xd1\xd6\x09\xa2\xb4\xc1\x3e\x19\x34\x35\x96\x78\x91\x48\x2d\x49\xd9\xf5\x16\xf9\xee\x87\x21\x29\x59\x92\xe5\x74\xbb\x5b\x1c\x70\x06\x76\x2b\x89\x33\xc3\x99\xdf\xfc\x25\x33\x1e\xc3\x54\x15\x5b\x2d\x92\xd4\xc2\xd9\xcb\xd3\x1f\x21\x62\xb9\x29\x65\x02\xd1\x55\x04\xd3\x4c\x95\x31\xcc\x99\x15\x6b\x84\xa9\xca\x8b\xd2\x0a\x99\xc0\x3d\xb2\x1c\x58\x69\x53\xa5\xcd\x68\x30\x1e\x0f\xc6\x63\x78\x2f\x38\x4a\x83\x31\x94\x32\x46\x0d\x36\x45\x98\x14\x8c\xa7\x58\xad\x1c\xc3\x27\xd4\x46\x28\x09\x67\xa3\x97\x70\x44\x04\xc3\xb0\x34\x7c\x71\x41\x22\xb6\xaa\x84\x9c\x6d\x41\x2a\x0b\xa5\x41\xb0\xa9\x30\xb0\x12\x19\x02\x7e\xe6\x58\x58\x10\x12\xb8\xca\x8b\x4c\x30\xc9\x11\x36\xc2\xa6\x6e\x9f\x20\x85\x34\x81\x5f\x83\x0c\xb5\xb4\x4c\x48\x60\xc0\x55\xb1\x05\xb5\x6a\x12\x02\xb3\x41\x69\xfa\xa5\xd6\x16\xe7\xe3\xf1\x66\xb3\x19\x31\xa7\xf0\x48\xe9\x64\x9c\x79\x52\x33\x7e\x3f\x9b\x5e\xcf\xa3\xeb\x93\xb3\xd1\xcb\xc0\xf4\x51\x66\x68\x0c\x68\xfc\xad\x14\x1a\x63\x58\x6e\x81\x15\x45\x26\x38\x5b\x66\x08\x19\xdb\x80\xd2\xc0\x12\x8d\x18\x83\x55\xa4\xf4\x46\x0b\xc2\xed\x18\x8c\x5a\xd9\x0d\xd3\x48\x62\x62\x61\xac\x16\xcb\xd2\xb6\x30\xab\x54\x14\xa6\x45\xa0\x24\x30\x09\xc3\x49\x04\xb3\x68\x08\x3f\x4f\xa2\x59\x74\x4c\x42\x1e\x66\xf7\x6f\x6f\x3e\xde\xc3\xc3\xe4\xee\x6e\x32\xbf\x9f\x5d\x47\x70\x73\x07\xd3\x9b\xf9\xd5\xec\x7e\x76\x33\x8f\xe0\xe6\x17\x98\xcc\x7f\x85\x77\xb3\xf9\xd5\x31\xa0\xb0\x29\x6a\xc0\xcf\x85\x26\x0b\x94\x06\x41\x68\x62\xec\xa0\x8b\x10\x5b\x2a\xac\x94\x57\xc9\x14\xc8\xc5\x4a\x70\xc8\x98\x4c\x4a\x96\x20\x24\x6a\x8d\x5a\x52\x24\x14\xa8\x73\x61\xc8\xab\x06\x98\x8c\x49\x4c\x26\x72\x61\x99\x75\x9f\xf6\xec\x1a\x0d\x88\xe4\x83\xe0\x29\xc3\x0c\x3e\xa1\xc4\xdf\x05\x83\x9f\xf2\xb5\x7f\xfa\x77\x92\x33\x91\x8d\xb8\xca\xff\x45\x74\x93\x4c\x3c\x32\x78\xcf\xb4\x41\x09\x3f\x31\x7a\x1b\x65\xee\xad\x49\x38\x30\x5b\x69\xd9\x67\xb8\x84\x61\xa1\x95\x55\xaf\x86\x17\x83\x41\xc1\xf8\x23\xa9\xca\x73\xc6\x36\xe6\x62\x30\x10\x79\xa1\xb4\x85\x61\xa2\x54\x92\xe1\x98\x15\x62\xcc\xa4\x54\x41\xd3\x91\xe3\x1c\x5e\xd4\x64\xee\x9d\x9f\x24\x28\x4f\xcc\x86\x25\x09\xea\xb1\x2a\x1c\x69\x2f\xdb\x60\xe0\x57\xe1\x28\xd1\x05\x1f\x25\xcc\xe2\x86\x6d\xfd\x32\x5f\x24\x28\x17\x41\xca\x28\x48\x19\xa9\x02\x25\x2b\xc4\xfa\xac\x5a\x79\x01\x97\xf0\x65\x00\x20\xe4\x4a\x9d\xbb\x27\x00\x2b\x6c\x86\xe7\x30\x9c\x66\xa5\xb1\xa8\xe1\x03\x93\x2c\x41\x0d\x93\x87\x08\xde\x62\x56\xd0\xe3\xed\x6c\x78\xe1\x88\xd7\x3e\xbd\xce\x61\xb8\x7e\x39\x3a\x1d\xbd\x0c\x9f\xb9\x92\x96\x71\x5b\x89\xa4\x9f\x64\x39\x49\xed\xb8\x21\xd0\xd3\xaf\xd4\xd9\x39\x0c\x29\x33\xcc\xf9\x78\x9c\x08\x9b\x96\x4b\x02\x7b\x6c\x7c\x71\x38\xe1\x92\xdb\x31\xcf\xd9\x09\xdb\x98\x06\x1f\x92\x57\xce\x61\xb8\xef\xcf\x40\xf4\x44\xff\xb8\xff\xe1\x67\x8b\x5a\xb2\x6c\x11\x2b\x6e\x2a\xe5\xfe\xcc\xbe\x31\x1a\xae\x85\x43\x95\x6c\x52\x1a\x81\x2d\x55\x69\xe1\x0f\x80\xf6\x34\x00\x30\x3c\xc5\x1c\xcd\x39\xbc\xbd\xbf\xbf\x8d\x2e\xba\x5f\xe8\x03\x57\xd2\x94\xee\xcb\x30\x64\x3a\xed\x36\xfe\x8f\x51\xd2\x89\x29\xb4\x8a\x4b\x7e\x68\xfd\xe9\x62\x30\x30\xa8\xd7\x82\x63\xad\x93\x37\x97\x12\x58\x64\x19\xf1\xaf\x85\x2b\x8d\x0c\xb8\xa7\x70\xeb\xba\xe0\x30\xd5\xc8\x2c\x56\x7c\x47\xad\xd7\x0f\x26\x79\x01\x1a\x6d\xa9\xa5\xe9\x2c\xdd\x61\x91\x6d\x5f\x34\x7c\x5e\xc7\xa7\x8b\xff\x11\x2b\xc4\x88\x70\xae\xa2\x6e\xf7\x2b\x4a\x0b\xe7\x30\x74\x19\xb2\x3e\x1d\x07\x7d\x86\x2d\x9a\xa5\x8a\xb7\x44\xf4\xf7\xdd\xe7\xa7\xe0\xe0\x96\x61\x1a\xad\x16\xb8\xf6\x75\xc5\x58\x66\x4b\x43\xb5\xb8\xb6\x92\x6a\x06\x08\x6b\xe0\xb1\x5c\x22\x57\x72\x25\x12\x57\x76\xb8\x92\x12\xb9\x15\x6b\x61\xb7\x35\x12\x6f\xd0\xd6\x30\xec\x9e\xdb\x18\xec\xbe\xff\x79\x00\x12\x7c\x1e\x80\x5e\x4b\x63\xcc\xd0\x62\x8f\xff\xae\xdc\x42\xad\x78\xeb\xb5\xad\x7b\x6b\xe9\xcf\xab\x1f\x34\xf9\x66\x0b\x6a\x5f\x31\xc8\x84\xb1\xe4\xa7\xc0\x68\x7a\x5c\xf0\x9e\x48\x8e\xda\xef\x87\x5c\x41\x6b\xdf\xdb\x1d\x63\xd2\xf1\xeb\x16\x95\x5a\x56\x75\xd1\x15\x56\x9d\xbb\xd4\x0c\x15\x82\x15\x02\x28\x33\x1b\xee\x7a\x83\x36\x8c\x29\xb3\x06\xf9\xd1\xee\xf3\x9e\x91\xe1\xfb\x77\x33\x30\xa8\xdb\x63\xdb\xd3\x60\x80\xb2\xcc\xab\x22\x12\xf9\x7c\xaa\x4b\xc9\x5c\x59\x30\x68\xdd\x6b\x74\x3f\xb9\xff\x18\x2d\x3e\xce\xa3\xdb\xeb\xe9\xec\x97\xd9\xf5\x15\x5c\xc2\xcb\x8b\x8a\xf4\x3e\x45\xb8\xbd\xbb\xf9\x34\x8b\x66\x37\xf3\xd9\xfc\x8d\xcb\x4d\x04\x21\x63\xaa\x5d\x68\x5c\xbe\x56\x39\x2a\x0c\x2c\x91\x9a\x3d\x77\x05\x26\x1e\x39\x29\x2d\xf6\x4b\x38\x6d\xc9\xbe\xfb\x38\xff\xaa\xd8\x94\x91\x5c\x94\x95\x58\x5f\x0b\x0c\xac\xca\x2c\xdb\x42\x69\x68\x9a\xf2\x5b\x55\xd2\x2e\xe1\xac\xbd\xcb\xf5\xf4\x66\x3e\x9d\xbd\xef\xdf\x89\x59\x30\x2a\x47\xd8\x28\xfd\x48\x72\x19\xd5\x13\xcc\xb6\xc1\x98\x58\x49\xa4\xb1\xaa\xa1\xd2\x31\x98\x92\xa7\xc0\x0c\x94\x45\xa2\x59\x4c\x64\xb4\x9c\x33\xa7\xb0\xd2\x20\x55\x8c\xf5\x10\x17\x94\x6b\x28\x71\x09\xaf\x5a\x0a\x46\xf7\x37\xb7\xb7\x7f\x18\x5e\x9f\xb8\x71\xf0\x5f\xe0\xbc\x84\x1f\x5a\x22\xaf\xef\xee\x6e\xee\x9e\x95\x47\xd3\xef\x12\xa1\x94\x1e\x42\xc7\xec\xb9\x2e\xe1\x75\x4b\xd6\xd5\xf5\x9b\xbb\xc9\xd5\xf5\xd5\xb3\xe2\xc2\x98\x6b\x68\x22\xd7\x0e\x44\x02\x4d\x81\x46\x63\xa9\xd7\x92\xbb\x60\x55\x4a\xb7\xc0\xb2\xaa\x60\xd7\xb2\x2f\xe1\x1f\x17\x14\xb9\x39\x1a\x43\x03\x59\xb7\x81\x35\xe2\x97\xe5\x58\x4d\xea\xd5\xee\x56\x91\x2d\x75\x7f\x0c\xe8\xd0\x5c\x2c\x13\x37\xc6\xec\x85\x9e\xa3\xa5\xa9\xb3\x1a\x5b\x5d\x06\x3b\x8a\xd6\xd6\xb7\x81\x2e\x2a\x90\xef\x98\x5c\x88\x1d\xd2\xd6\xa5\x78\xa3\x75\xa7\xe8\xc6\x69\x17\x17\xb6\xa5\xf6\x86\x99\xa6\xd2\x74\x44\x70\x87\x19\x02\x13\x8d\x4f\xd1\xa5\x52\x19\xa8\xc7\x3d\x03\x62\xb4\x4c\x64\xa6\x8b\x44\x60\x25\xdc\x0b\x25\x8d\xf7\x6b\x50\x6c\x66\x31\xaf\x09\xbb\x26\xb4\x5a\xe5\x1f\x41\x3b\x53\xea\x91\xce\x24\xc5\xb3\x58\x4f\x35\xc6\x28\xad\x60\x99\x21\xbe\xdf\x4a\xd4\xdb\xfa\xc8\xd0\x6c\x82\x93\x87\xa8\x49\xcb\x1b\xcf\xcd\x84\xbe\x62\x96\x71\x94\xde\xd4\xa4\x72\x59\xd8\xdd\x7f\xf1\xf9\xd5\x6b\x5a\xc7\x35\xb3\x4e\x8a\xf9\x34\x37\x5b\x63\x31\xdf\x07\xbf\x09\xe5\x95\x43\xff\x59\x40\xbb\x2d\xbc\x19\x11\xcc\x52\x3e\x37\xf6\xfe\x9b\xf1\xd0\x59\x45\x83\xaa\xd5\x6a\xfb\x2d\xa8\x86\x5e\xfe\x3f\x84\x74\x7f\x08\xd9\x99\x37\x55\x65\x16\xb7\x80\x5d\x62\x65\x55\xc8\xcc\xbe\xa0\x8e\xea\xb9\x8f\x58\x9b\x29\x10\x54\x09\x83\xe1\xe1\xc0\x0d\xc3\x45\x43\x93\xef\x12\x7c\xa7\x87\x91\x82\x23\xe6\x06\x88\xc4\x1d\x63\x79\x8a\x9c\x52\x42\xac\x5c\xa6\x1b\xb4\x2f\x7a\xa1\x7c\x4e\xff\xbf\x14\xa1\x81\xe9\x7d\xef\x5c\x86\x85\xef\x9f\x3d\xc5\x60\x1f\xd4\x26\xd1\x4e\x99\xab\x4e\x25\x68\x5a\x27\xe2\x96\x0e\x3d\x75\xa3\x27\xa2\x77\x41\x38\x89\x63\xe1\x5b\x43\xcf\x00\xd6\x3e\x16\x1c\x10\xe9\x09\x16\x95\x05\xdd\x26\x7b\x98\xbf\x3d\x27\xd5\x51\xf6\xc3\x37\x26\xc8\xeb\x3e\x00\x1b\x75\xe2\xff\x1f\xc6\x66\xdd\x6a\x9c\xc4\xac\xaa\x0e\x62\xf4\x78\x40\x6c\x83\xbe\x3b\xab\x7c\xb3\x67\x5e\x1f\xee\xbd\xad\x76\xdd\x5b\x70\xeb\x1e\x7e\x02\xbc\xd4\x1a\xa5\xcd\x42\xd7\xa5\xe1\x6f\xe3\xae\xbb\x72\xc6\xcc\x57\x27\x88\xea\xbc\xa0\x56\xf0\xae\x5c\xa2\x96\x68\xb1\xc5\xf5\xf8\xa3\x59\x54\x44\xdd\x99\x74\xf2\x10\x7d\x6d\xf2\x98\x3c\x44\xce\x0a\xd2\xa9\xed\x85\x83\xf3\x84\x30\xf0\x76\xb2\x2b\x0b\xa9\x48\xd2\x05\x5b\x33\x91\xb1\xa5\xa0\x91\x6b\x0f\xfa\x15\x5b\x6a\xc1\x43\x43\x2f\x4d\x67\x6e\x42\x4b\x43\xf1\x22\x10\x39\xdc\x09\xf8\xc0\xcb\xdb\xc5\xb5\x0c\x57\x81\x6e\x4c\xaf\x46\xe2\xca\x99\x95\xaf\x3a\x75\xf6\x4b\x6b\x0a\x46\xae\xd1\xbe\xc3\xed\x2c\x76\x82\x26\xb7\x33\x98\x70\x8e\xa6\x05\xaa\x71\x54\x8b\x47\xdc\x2e\x3a\xa9\xb2\x93\xe1\xb9\xde\xe1\xb6\x96\xc3\x0e\xc9\xf1\x0b\x24\x6e\xff\xd8\xe0\x13\xfb\xb0\x88\x03\xad\xb1\xd7\x89\x5f\xba\xce\xa7\x9a\x02\x53\x57\x54\xaa\x0e\x44\x9f\xfc\x17\x88\x99\x65\x8b\x50\x72\x9e\xe9\xfb\xcb\x52\xb4\x3b\xed\xb7\xb4\xfd\x9f\x7f\xbd\x01\x61\x31\x37\x15\xd3\xad\x0e\x19\x5a\x6a\x8c\xa9\x64\xd1\x20\x6a\x54\xa9\x39\xb6\x23\x70\x26\x8d\x75\x57\xeb\x89\x56\x65\xd1\x69\x2f\x93\x87\xa8\x5a\x7f\x43\xcb\x20\xc2\xdb\xc2\x53\xfb\x18\xdc\x05\xb3\xe0\xe9\x1e\x18\x8d\x70\x69\x80\xb2\x3b\x0e\xd7\x8c\x55\x17\x2e\xcd\x09\x32\x63\x4f\x4e\x8f\x01\x2d\x1f\xbd\xa8\x29\xbb\xae\x3a\xbd\xd8\x17\xd2\xca\x90\xdf\x95\x44\xd3\x10\xb8\x3c\x86\xea\xf9\x8c\xbb\xe7\x0d\xd2\x73\xdc\xdd\xa9\x06\x20\x6c\xd9\x94\xba\xf0\x52\x6b\xf4\x9f\x6a\xfb\x7f\x51\x1a\x36\x29\x4a\x7f\x06\xb5\xa9\x90\x89\x01\xa6\x11\x58\xa6\x91\xc5\xdb\xea\xd4\xdb\x85\xa5\xc7\x57\x2d\x78\x28\xcc\x3e\xdd\x4e\x41\xc4\xc7\xb0\xcc\x98\x7c\x74\x71\x4c\xff\x0d\xbd\x44\xa0\x73\x2d\xbd\x6f\x55\x39\x3c\x86\x95\xc8\x32\x3f\xb9\x6c\x55\xe9\x14\xa0\xf0\xf8\x74\x3b\xed\x22\xb9\x2e\x78\x2b\xf1\xaa\xe1\x0d\x79\xa9\x09\x3f\xe7\xe4\x2e\x93\x09\xab\x3e\x04\x3c\xff\xd9\x45\x57\xdf\xd9\xe4\x03\x68\x95\x61\x77\x42\x83\x23\xa6\xe5\x9e\x4b\x05\xcb\x17\x44\xbd\x60\x5a\xee\xa2\x73\x87\x6c\x27\x48\x21\xc6\x95\x90\x08\x0c\xec\xb6\x40\x77\x89\x20\xcb\x7c\x49\x75\x74\x55\x87\xa8\xe9\xc2\xdc\x8e\xe4\x16\xc2\xb5\x7c\x27\xef\x28\x7f\x3d\xca\x98\x4e\xf0\x40\x00\x3a\xa2\x2e\x68\x1f\x84\x14\x79\x99\xf7\x29\x02\x47\x31\xae\x58\x99\x59\x97\xe7\xbf\xa3\x56\x3b\x91\x42\xda\x57\x67\x90\x0b\xb9\xf8\xad\x64\xd2\xfa\xba\xde\x86\xf3\x03\xfb\xfc\x17\x24\xb3\xcf\x4d\xc9\xaf\x5a\x92\xab\x81\x44\xb4\xe0\x85\x23\x7f\x8d\xc5\x32\x60\xa5\x55\x27\x09\x4a\xd4\x2e\x1b\xba\xb3\xf0\x7e\x57\xfd\xa1\x2d\xbf\xd6\x98\x7a\x0f\x86\xbb\x94\x9d\xf6\x31\x1a\xf7\xd7\xb4\xaf\x5a\x11\x08\x9b\x96\xbc\x6e\x87\x6c\xf4\x36\xf4\x17\x12\xa1\x0a\x4a\x42\x93\x86\x3a\x5f\x5d\xf9\xd0\xee\xa6\xe6\x72\x5d\xd5\x98\x34\xb4\x0d\x7f\x69\x01\xd5\xa5\xdb\x78\x4c\xb3\x7c\x73\x2e\xa0\xbe\x11\xf9\x8b\xc3\xc6\xb4\xbf\xbb\x21\x84\x2f\x81\xcf\x4f\xfd\x14\xf7\x15\x77\x75\xfe\xd9\xe7\xeb\x9e\x10\x56\xa4\xbb\xf6\x73\xde\x86\x19\xb8\x79\x77\xe0\xe8\x5a\x89\xea\xb9\xb8\xdc\xab\x1d\x96\x25\x15\x04\x89\xb0\x54\xdc\x94\x11\x56\xe9\x6d\xd7\x89\x89\xb0\x8d\x21\xe7\x74\x2f\xa9\x53\x66\xd2\x6a\xb4\x23\x49\x5c\xe5\xb9\xb0\x7d\x52\xfc\xca\x5e\x28\xf7\x8c\x3b\x56\x23\x3a\x53\x79\x86\x4c\xfa\xfa\x49\xad\xb0\x57\x2c\x11\x2f\xfc\xcd\x55\x37\x96\xaf\x5c\x1d\x5c\xf9\x36\xda\xe5\x75\x1f\x17\xb1\xe7\x6b\xc7\xe8\xa7\x9d\x87\x13\x37\xf8\xc4\x7e\x06\xce\x0b\x11\x2e\xd2\x9a\x3a\xa8\x06\x3e\xed\x08\x9c\x7a\x0e\xbd\x9b\xbc\x1a\x7c\xbc\x5a\xac\x83\x2c\x70\xdd\x66\xcc\x92\xe7\x40\x58\x0f\x82\x27\xf4\x43\xd3\x18\x74\x29\xdd\x9f\x5c\xc3\x48\xd9\x90\x58\x54\x8c\x97\xf0\xcf\x6e\xb5\xac\x4c\x6a\x04\x85\x5b\xea\x89\x95\x60\xcd\xa2\x79\xbe\xa8\x8e\x8f\x83\xff\x06\x00\x00\xff\xff\x33\xee\x93\x02\x28\x20\x00\x00")

func apiProtoBytes() ([]byte, error) {
	return bindataRead(
		_apiProto,
		"api.proto",
	)
}

func apiProto() (*asset, error) {
	bytes, err := apiProtoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "api.proto", size: 8232, mode: os.FileMode(420), modTime: time.Unix(1555020628, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"api.proto": apiProto,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"api.proto": &bintree{apiProto, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


func assetFS() *assetfs.AssetFS {
	assetInfo := func(path string) (os.FileInfo, error) {
		return os.Stat(path)
	}
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: assetInfo, Prefix: k}
	}
	panic("unreachable")
}
